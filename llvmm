#!/bin/bash


LLVMM_DIR=~/.llvmm
mkdir -p ${LLVMM_DIR}/default

MACHINE_ARCH=$(uname -m)
SUPPORTED_ARCHS=( x86_64 arm64 )
SUPPORTED_OS=( darwin rhel ubuntu fedora )

TARGET_OS=""
TARGET_ARCH=""

resolve_system() {
    local sys_name
    sys_name=$(uname -a)
    
    for os in "${SUPPORTED_OS[@]}"
    do
        if [[ $sys_name == *$os* ]]
        then
            TARGET_OS=$os
        fi
    done
}

resolve_system
if [[ $TARGET_OS == "" ]]
then
    echo "Seems like your OS is not supported yet :/"
    exit 1
fi

resolve_arch() {
    for arch in "${SUPPORTED_ARCHS[@]}"
    do
        if [[ $MACHINE_ARCH == "$arch" ]]
        then
            TARGET_ARCH=$arch
        fi
    done
}

resolve_arch
if [[ $TARGET_ARCH == "" ]]
then
    echo "Seems like your arch is not supported yet :/"
    exit 1
fi


ls_remote() {
    remote_versions=$( curl -s 'https://api.github.com/repos/llvm/llvm-project/releases?per_page=100' | jq '.[].name' )
    
    for r_version in ${remote_versions}
    do
        if [[ $r_version == *LLVM* ]]
        then
            continue
        fi
        
        local version=${r_version:0:-1}
        
        printf "%20s\n" "v$version"
    done
}


list() {
    for f in "${LLVMM_DIR}"/*
    do [ -d "$f" ]
        if [[ $f == *default* ]]
        then
            continue
        fi
        
        printf "%20s\n" "v$version"
    done
}


is_installed() {
    local version=$1
    
    if [[ $version == "" ]]
    then
        echo "should provide a version"
    fi
    
    for f in "${LLVMM_DIR}"/*
    do [ -d "$f" ]
        if [[ $f == *default* ]]
        then
            continue
        elif [[  $f == *$version*  ]]
        then
            return 0 # is installed
        fi
    done
    
    return 1 # is not installed
}


remove () {
    local version=$1
    
    if [[ $version == "" ]]
    then
        echo "should provide a version"
    fi
    
    is_installed "${version}"
    rc=$?
    
    if [ $rc -eq 0 ]
    then
        rm -r "${LLVMM_DIR}/${version:?}"
        rc=$?
        
        echo "version ${1} successifully removed"
        return 0
    else
        echo "the version '${version}' is not installed"
        return 1
    fi
}

install() {
    echo ""
}

version_exists() {
    echo ""
}

build_from_source() {
    echo ""
}

make_default() {
    echo ""
}



OPTION=$1
OPTION_ARG1=$2
OPTION_ARG2=$3

case $OPTION in
    "remove"|"rm")
        remove "${OPTION_ARG1}"
    ;;
    "ls-remote"|"remote")
        ls_remote
    ;;
    "ls"|"local")
        list
    ;;
    "install"|"i")
        echo "install"
    ;;
    "default"|"d")
        echo "default"
    ;;
    *);;
esac
